#!/usr/bin/env bash

set -euo pipefail

#************************************************************************#
# Recreates a branch from its parent branch after the parent has changed #
#************************************************************************#

program=`basename $0`

#**********#
# Commands #
#**********#
_help_cmd(){
  echo -e "Usage: $program <subcommand> <args>"
  echo -e ""
  echo -e "Assists in the process of recreating a branch after its parent changed."
  echo -e ""
  echo -e "Start with:"
  echo -e ""
  echo -e "    $program start <branch> <parent>"
  echo -e ""
  echo -e "A temporary branch is created from <parent> and commits introduced"
  echo -e "in <branch> are cherry-picked. Conflicts need to be resolved if any."
  echo -e ""
  echo -e "To finish:"
  echo -e ""
  echo -e "    $program finish"
  echo -e ""
  echo -e "The temporary branch is swapped with the initial <branch> and the"
  echo -e "initial <branch> renamed to REPICK-FINISHED/<branch> as a backup."
  echo -e "It can be manually removed."
  echo -e ""
}

_start_cmd(){
  [ $# -eq 2 ] || _subcommand_abort start '<branch>' '<parent>'

  _ensure_not_repicking

  branch="$1"
  parent="$2"

  # Create temporary branch from parent
  _branch_cmd "$branch" "$parent"

  # Cherry-picks commits introduced on the reference branch
  range=$(_cherry_pick_range "$branch" "$parent")
  git cherry-pick "$range" && echo 'Successfully applied commits' || echo 'Plase resolve merge conflicts'
}

_branch_cmd(){
  [ $# -eq 2 ] || _subcommand_abort branch '<branch>' '<parent>'

  _ensure_not_repicking

  branch="$1"
  parent="$2"

  # Create temporary branch from parent
  git checkout -b "REPICK/$branch/FROM/$parent" "$parent"
}

_preview_cmd(){
  [ $# -eq 2 ] || _subcommand_abort preview '<branch>' '<parent>'

  branch="$1"
  parent="$2"
  range=$(_cherry_pick_range "$branch" "$parent")

  git lg "$range"
}

_finish_cmd(){
  _ensure_repicking

  branch=`_branch`
  bkp="REPICK-FINISHED/$branch"

  # Backup reference branch
  git branch -m "$branch" "$bkp"
  # Replace original reference branch with the current temporary branch
  git branch -m "$branch"

  echo -e "'$branch' has been replaced and backed up as '$bkp'"
}

_clear_cmd(){
  echo 'Delete the following branches?'
  echo ''
  _list_cmd
  echo ''

  read -p 'Press enter to continue'

  _list_cmd | xargs git branch -D
}

_list_cmd(){
  git branch | sed 's/^*/ /g' | grep '^  REPICK'
}

_abort_cmd(){
  _ensure_repicking

  branch=`_branch`
  bkp="REPICK-ABORTED/$branch"

  # Backup temporary branch
  git branch -m "$bkp"

  echo -e "Temporary repick branch has been replaced and backed up as '$bkp'"
  echo -e "Returning to reference branch '$branch'"

  git checkout "$branch"
}

#***********#
# FUNCTIONS #
#***********#
_subcommand_help(){
  echo "Usage: $program $@"
}

_abort(){
  _help_cmd
  exit 1
}

_exit(){
  echo "$@"
  exit 1
}

_subcommand_abort(){
  _subcommand_help "$@"
  exit 1
}

# Delegates a sub-command to the specific function
_subcommand(){
  command="_$1_cmd"
  shift
  $command "$@"
}

_current_branch(){
  git branch | grep '*' | cut -d ' ' -f 2
}

_repicking?(){
  _current_branch | grep '^REPICK/'
}

_ensure_not_repicking(){
  _repicking? && _exit 'Aborting. Currently on a repick branch.' || true
}

_ensure_repicking(){
  _repicking? || _exit 'Aborting. Not in a repick branch.'
}

# Extracts the reference (1) or bash (2) branch from the temporary branch
_split_branch(){
  _current_branch \
    | sed -e 's#^REPICK/##' \
    | sed -e 's#/FROM/#|#' \
    | cut -d '|' -f $1
}
_branch(){
  _split_branch 1
}
_parent(){
  _split_branch 2
}
_cherry_pick_range(){
  # Returns the commit range for using with cherry-pick

  branch="$1"
  parent="$2"

  # Get hashes in order so first comes on top
  commits=$(git log --reverse --format='%h' $parent..$branch)
  first=$(echo "$commits" | head -1)
  last=$(echo "$commits" | tail -1)
  echo "$first^..$last"
}

# Ensures there is a sub-command
[ $# -eq 0 ] && _abort

# Run sub-command
_subcommand "$@"